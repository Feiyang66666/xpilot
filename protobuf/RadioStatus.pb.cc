// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RadioStatus.proto

#include "RadioStatus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr RadioStatus::RadioStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : com1_tx_(false)
  , com1_rx_(false)
  , com2_tx_(false)
  , com2_rx_(false){}
struct RadioStatusDefaultTypeInternal {
  constexpr RadioStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadioStatusDefaultTypeInternal() {}
  union {
    RadioStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadioStatusDefaultTypeInternal _RadioStatus_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RadioStatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_RadioStatus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RadioStatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RadioStatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStatus, com1_tx_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStatus, com1_rx_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStatus, com2_tx_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStatus, com2_rx_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::xpilot::RadioStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_RadioStatus_default_instance_),
};

const char descriptor_table_protodef_RadioStatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021RadioStatus.proto\022\006xpilot\"\225\001\n\013RadioSta"
  "tus\022\024\n\007com1_tx\030\001 \001(\010H\000\210\001\001\022\024\n\007com1_rx\030\002 \001"
  "(\010H\001\210\001\001\022\024\n\007com2_tx\030\003 \001(\010H\002\210\001\001\022\024\n\007com2_rx"
  "\030\004 \001(\010H\003\210\001\001B\n\n\010_com1_txB\n\n\010_com1_rxB\n\n\010_"
  "com2_txB\n\n\010_com2_rxB\031\252\002\026Vatsim.Xpilot.Pr"
  "otobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RadioStatus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RadioStatus_2eproto = {
  false, false, 214, descriptor_table_protodef_RadioStatus_2eproto, "RadioStatus.proto", 
  &descriptor_table_RadioStatus_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_RadioStatus_2eproto::offsets,
  file_level_metadata_RadioStatus_2eproto, file_level_enum_descriptors_RadioStatus_2eproto, file_level_service_descriptors_RadioStatus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_RadioStatus_2eproto_getter() {
  return &descriptor_table_RadioStatus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_RadioStatus_2eproto(&descriptor_table_RadioStatus_2eproto);
namespace xpilot {

// ===================================================================

class RadioStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioStatus>()._has_bits_);
  static void set_has_com1_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_com1_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_com2_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_com2_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RadioStatus::RadioStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.RadioStatus)
}
RadioStatus::RadioStatus(const RadioStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&com1_tx_, &from.com1_tx_,
    static_cast<size_t>(reinterpret_cast<char*>(&com2_rx_) -
    reinterpret_cast<char*>(&com1_tx_)) + sizeof(com2_rx_));
  // @@protoc_insertion_point(copy_constructor:xpilot.RadioStatus)
}

void RadioStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&com1_tx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&com2_rx_) -
    reinterpret_cast<char*>(&com1_tx_)) + sizeof(com2_rx_));
}

RadioStatus::~RadioStatus() {
  // @@protoc_insertion_point(destructor:xpilot.RadioStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadioStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadioStatus::ArenaDtor(void* object) {
  RadioStatus* _this = reinterpret_cast< RadioStatus* >(object);
  (void)_this;
}
void RadioStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadioStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadioStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.RadioStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&com1_tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&com2_rx_) -
      reinterpret_cast<char*>(&com1_tx_)) + sizeof(com2_rx_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool com1_tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_com1_tx(&has_bits);
          com1_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool com1_rx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_com1_rx(&has_bits);
          com1_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool com2_tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_com2_tx(&has_bits);
          com2_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool com2_rx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_com2_rx(&has_bits);
          com2_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadioStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.RadioStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool com1_tx = 1;
  if (_internal_has_com1_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_com1_tx(), target);
  }

  // optional bool com1_rx = 2;
  if (_internal_has_com1_rx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_com1_rx(), target);
  }

  // optional bool com2_tx = 3;
  if (_internal_has_com2_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_com2_tx(), target);
  }

  // optional bool com2_rx = 4;
  if (_internal_has_com2_rx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_com2_rx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.RadioStatus)
  return target;
}

size_t RadioStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.RadioStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool com1_tx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool com1_rx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool com2_tx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool com2_rx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadioStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.RadioStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RadioStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadioStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.RadioStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.RadioStatus)
    MergeFrom(*source);
  }
}

void RadioStatus::MergeFrom(const RadioStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.RadioStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      com1_tx_ = from.com1_tx_;
    }
    if (cached_has_bits & 0x00000002u) {
      com1_rx_ = from.com1_rx_;
    }
    if (cached_has_bits & 0x00000004u) {
      com2_tx_ = from.com2_tx_;
    }
    if (cached_has_bits & 0x00000008u) {
      com2_rx_ = from.com2_rx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadioStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.RadioStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioStatus::CopyFrom(const RadioStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.RadioStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioStatus::IsInitialized() const {
  return true;
}

void RadioStatus::InternalSwap(RadioStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioStatus, com2_rx_)
      + sizeof(RadioStatus::com2_rx_)
      - PROTOBUF_FIELD_OFFSET(RadioStatus, com1_tx_)>(
          reinterpret_cast<char*>(&com1_tx_),
          reinterpret_cast<char*>(&other->com1_tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_RadioStatus_2eproto_getter, &descriptor_table_RadioStatus_2eproto_once,
      file_level_metadata_RadioStatus_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::RadioStatus* Arena::CreateMaybeMessage< ::xpilot::RadioStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::RadioStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
