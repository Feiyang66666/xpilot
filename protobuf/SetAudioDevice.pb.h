// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SetAudioDevice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SetAudioDevice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SetAudioDevice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SetAudioDevice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SetAudioDevice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SetAudioDevice_2eproto;
namespace xpilot {
class SetAudioDevice;
struct SetAudioDeviceDefaultTypeInternal;
extern SetAudioDeviceDefaultTypeInternal _SetAudioDevice_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::SetAudioDevice* Arena::CreateMaybeMessage<::xpilot::SetAudioDevice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class SetAudioDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.SetAudioDevice) */ {
 public:
  inline SetAudioDevice() : SetAudioDevice(nullptr) {}
  ~SetAudioDevice() override;
  explicit constexpr SetAudioDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAudioDevice(const SetAudioDevice& from);
  SetAudioDevice(SetAudioDevice&& from) noexcept
    : SetAudioDevice() {
    *this = ::std::move(from);
  }

  inline SetAudioDevice& operator=(const SetAudioDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAudioDevice& operator=(SetAudioDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAudioDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAudioDevice* internal_default_instance() {
    return reinterpret_cast<const SetAudioDevice*>(
               &_SetAudioDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetAudioDevice& a, SetAudioDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAudioDevice* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAudioDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAudioDevice* New() const final {
    return new SetAudioDevice();
  }

  SetAudioDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAudioDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAudioDevice& from);
  void MergeFrom(const SetAudioDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAudioDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.SetAudioDevice";
  }
  protected:
  explicit SetAudioDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioApiFieldNumber = 1,
    kOutputDeviceNameFieldNumber = 2,
    kInputDeviceNameFieldNumber = 3,
    kCom1VolumeFieldNumber = 4,
    kCom2VolumeFieldNumber = 5,
  };
  // optional string audio_api = 1;
  bool has_audio_api() const;
  private:
  bool _internal_has_audio_api() const;
  public:
  void clear_audio_api();
  const std::string& audio_api() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_api(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_api();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_audio_api();
  void set_allocated_audio_api(std::string* audio_api);
  private:
  const std::string& _internal_audio_api() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_api(const std::string& value);
  std::string* _internal_mutable_audio_api();
  public:

  // optional string output_device_name = 2;
  bool has_output_device_name() const;
  private:
  bool _internal_has_output_device_name() const;
  public:
  void clear_output_device_name();
  const std::string& output_device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_device_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_output_device_name();
  void set_allocated_output_device_name(std::string* output_device_name);
  private:
  const std::string& _internal_output_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_device_name(const std::string& value);
  std::string* _internal_mutable_output_device_name();
  public:

  // optional string input_device_name = 3;
  bool has_input_device_name() const;
  private:
  bool _internal_has_input_device_name() const;
  public:
  void clear_input_device_name();
  const std::string& input_device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_device_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_input_device_name();
  void set_allocated_input_device_name(std::string* input_device_name);
  private:
  const std::string& _internal_input_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_device_name(const std::string& value);
  std::string* _internal_mutable_input_device_name();
  public:

  // optional float com1_volume = 4;
  bool has_com1_volume() const;
  private:
  bool _internal_has_com1_volume() const;
  public:
  void clear_com1_volume();
  float com1_volume() const;
  void set_com1_volume(float value);
  private:
  float _internal_com1_volume() const;
  void _internal_set_com1_volume(float value);
  public:

  // optional float com2_volume = 5;
  bool has_com2_volume() const;
  private:
  bool _internal_has_com2_volume() const;
  public:
  void clear_com2_volume();
  float com2_volume() const;
  void set_com2_volume(float value);
  private:
  float _internal_com2_volume() const;
  void _internal_set_com2_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.SetAudioDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_api_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_device_name_;
  float com1_volume_;
  float com2_volume_;
  friend struct ::TableStruct_SetAudioDevice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetAudioDevice

// optional string audio_api = 1;
inline bool SetAudioDevice::_internal_has_audio_api() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SetAudioDevice::has_audio_api() const {
  return _internal_has_audio_api();
}
inline void SetAudioDevice::clear_audio_api() {
  audio_api_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetAudioDevice::audio_api() const {
  // @@protoc_insertion_point(field_get:xpilot.SetAudioDevice.audio_api)
  return _internal_audio_api();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetAudioDevice::set_audio_api(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 audio_api_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.SetAudioDevice.audio_api)
}
inline std::string* SetAudioDevice::mutable_audio_api() {
  // @@protoc_insertion_point(field_mutable:xpilot.SetAudioDevice.audio_api)
  return _internal_mutable_audio_api();
}
inline const std::string& SetAudioDevice::_internal_audio_api() const {
  return audio_api_.Get();
}
inline void SetAudioDevice::_internal_set_audio_api(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  audio_api_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetAudioDevice::_internal_mutable_audio_api() {
  _has_bits_[0] |= 0x00000001u;
  return audio_api_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetAudioDevice::release_audio_api() {
  // @@protoc_insertion_point(field_release:xpilot.SetAudioDevice.audio_api)
  if (!_internal_has_audio_api()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return audio_api_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetAudioDevice::set_allocated_audio_api(std::string* audio_api) {
  if (audio_api != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  audio_api_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_api,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.SetAudioDevice.audio_api)
}

// optional string output_device_name = 2;
inline bool SetAudioDevice::_internal_has_output_device_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetAudioDevice::has_output_device_name() const {
  return _internal_has_output_device_name();
}
inline void SetAudioDevice::clear_output_device_name() {
  output_device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SetAudioDevice::output_device_name() const {
  // @@protoc_insertion_point(field_get:xpilot.SetAudioDevice.output_device_name)
  return _internal_output_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetAudioDevice::set_output_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 output_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.SetAudioDevice.output_device_name)
}
inline std::string* SetAudioDevice::mutable_output_device_name() {
  // @@protoc_insertion_point(field_mutable:xpilot.SetAudioDevice.output_device_name)
  return _internal_mutable_output_device_name();
}
inline const std::string& SetAudioDevice::_internal_output_device_name() const {
  return output_device_name_.Get();
}
inline void SetAudioDevice::_internal_set_output_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  output_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetAudioDevice::_internal_mutable_output_device_name() {
  _has_bits_[0] |= 0x00000002u;
  return output_device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetAudioDevice::release_output_device_name() {
  // @@protoc_insertion_point(field_release:xpilot.SetAudioDevice.output_device_name)
  if (!_internal_has_output_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return output_device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetAudioDevice::set_allocated_output_device_name(std::string* output_device_name) {
  if (output_device_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  output_device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_device_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.SetAudioDevice.output_device_name)
}

// optional string input_device_name = 3;
inline bool SetAudioDevice::_internal_has_input_device_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetAudioDevice::has_input_device_name() const {
  return _internal_has_input_device_name();
}
inline void SetAudioDevice::clear_input_device_name() {
  input_device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SetAudioDevice::input_device_name() const {
  // @@protoc_insertion_point(field_get:xpilot.SetAudioDevice.input_device_name)
  return _internal_input_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetAudioDevice::set_input_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 input_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.SetAudioDevice.input_device_name)
}
inline std::string* SetAudioDevice::mutable_input_device_name() {
  // @@protoc_insertion_point(field_mutable:xpilot.SetAudioDevice.input_device_name)
  return _internal_mutable_input_device_name();
}
inline const std::string& SetAudioDevice::_internal_input_device_name() const {
  return input_device_name_.Get();
}
inline void SetAudioDevice::_internal_set_input_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  input_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetAudioDevice::_internal_mutable_input_device_name() {
  _has_bits_[0] |= 0x00000004u;
  return input_device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetAudioDevice::release_input_device_name() {
  // @@protoc_insertion_point(field_release:xpilot.SetAudioDevice.input_device_name)
  if (!_internal_has_input_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return input_device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetAudioDevice::set_allocated_input_device_name(std::string* input_device_name) {
  if (input_device_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  input_device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_device_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.SetAudioDevice.input_device_name)
}

// optional float com1_volume = 4;
inline bool SetAudioDevice::_internal_has_com1_volume() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SetAudioDevice::has_com1_volume() const {
  return _internal_has_com1_volume();
}
inline void SetAudioDevice::clear_com1_volume() {
  com1_volume_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SetAudioDevice::_internal_com1_volume() const {
  return com1_volume_;
}
inline float SetAudioDevice::com1_volume() const {
  // @@protoc_insertion_point(field_get:xpilot.SetAudioDevice.com1_volume)
  return _internal_com1_volume();
}
inline void SetAudioDevice::_internal_set_com1_volume(float value) {
  _has_bits_[0] |= 0x00000008u;
  com1_volume_ = value;
}
inline void SetAudioDevice::set_com1_volume(float value) {
  _internal_set_com1_volume(value);
  // @@protoc_insertion_point(field_set:xpilot.SetAudioDevice.com1_volume)
}

// optional float com2_volume = 5;
inline bool SetAudioDevice::_internal_has_com2_volume() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SetAudioDevice::has_com2_volume() const {
  return _internal_has_com2_volume();
}
inline void SetAudioDevice::clear_com2_volume() {
  com2_volume_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SetAudioDevice::_internal_com2_volume() const {
  return com2_volume_;
}
inline float SetAudioDevice::com2_volume() const {
  // @@protoc_insertion_point(field_get:xpilot.SetAudioDevice.com2_volume)
  return _internal_com2_volume();
}
inline void SetAudioDevice::_internal_set_com2_volume(float value) {
  _has_bits_[0] |= 0x00000010u;
  com2_volume_ = value;
}
inline void SetAudioDevice::set_com2_volume(float value) {
  _internal_set_com2_volume(value);
  // @@protoc_insertion_point(field_set:xpilot.SetAudioDevice.com2_volume)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SetAudioDevice_2eproto
