// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SetAudioDevice.proto

#include "SetAudioDevice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr SetAudioDevice::SetAudioDevice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audio_api_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , com1_volume_(0)
  , com2_volume_(0){}
struct SetAudioDeviceDefaultTypeInternal {
  constexpr SetAudioDeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAudioDeviceDefaultTypeInternal() {}
  union {
    SetAudioDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAudioDeviceDefaultTypeInternal _SetAudioDevice_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SetAudioDevice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SetAudioDevice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SetAudioDevice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SetAudioDevice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::SetAudioDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::SetAudioDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::SetAudioDevice, audio_api_),
  PROTOBUF_FIELD_OFFSET(::xpilot::SetAudioDevice, output_device_name_),
  PROTOBUF_FIELD_OFFSET(::xpilot::SetAudioDevice, input_device_name_),
  PROTOBUF_FIELD_OFFSET(::xpilot::SetAudioDevice, com1_volume_),
  PROTOBUF_FIELD_OFFSET(::xpilot::SetAudioDevice, com2_volume_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::xpilot::SetAudioDevice)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_SetAudioDevice_default_instance_),
};

const char descriptor_table_protodef_SetAudioDevice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024SetAudioDevice.proto\022\006xpilot\"\370\001\n\016SetAu"
  "dioDevice\022\026\n\taudio_api\030\001 \001(\tH\000\210\001\001\022\037\n\022out"
  "put_device_name\030\002 \001(\tH\001\210\001\001\022\036\n\021input_devi"
  "ce_name\030\003 \001(\tH\002\210\001\001\022\030\n\013com1_volume\030\004 \001(\002H"
  "\003\210\001\001\022\030\n\013com2_volume\030\005 \001(\002H\004\210\001\001B\014\n\n_audio"
  "_apiB\025\n\023_output_device_nameB\024\n\022_input_de"
  "vice_nameB\016\n\014_com1_volumeB\016\n\014_com2_volum"
  "eB\031\252\002\026Vatsim.Xpilot.Protobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SetAudioDevice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SetAudioDevice_2eproto = {
  false, false, 316, descriptor_table_protodef_SetAudioDevice_2eproto, "SetAudioDevice.proto", 
  &descriptor_table_SetAudioDevice_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_SetAudioDevice_2eproto::offsets,
  file_level_metadata_SetAudioDevice_2eproto, file_level_enum_descriptors_SetAudioDevice_2eproto, file_level_service_descriptors_SetAudioDevice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_SetAudioDevice_2eproto_getter() {
  return &descriptor_table_SetAudioDevice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_SetAudioDevice_2eproto(&descriptor_table_SetAudioDevice_2eproto);
namespace xpilot {

// ===================================================================

class SetAudioDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<SetAudioDevice>()._has_bits_);
  static void set_has_audio_api(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_input_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_com1_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_com2_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SetAudioDevice::SetAudioDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.SetAudioDevice)
}
SetAudioDevice::SetAudioDevice(const SetAudioDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audio_api_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_audio_api()) {
    audio_api_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_api(), 
      GetArenaForAllocation());
  }
  output_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_device_name()) {
    output_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_device_name(), 
      GetArenaForAllocation());
  }
  input_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_input_device_name()) {
    input_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_device_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&com1_volume_, &from.com1_volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&com2_volume_) -
    reinterpret_cast<char*>(&com1_volume_)) + sizeof(com2_volume_));
  // @@protoc_insertion_point(copy_constructor:xpilot.SetAudioDevice)
}

void SetAudioDevice::SharedCtor() {
audio_api_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
output_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
input_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&com1_volume_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&com2_volume_) -
    reinterpret_cast<char*>(&com1_volume_)) + sizeof(com2_volume_));
}

SetAudioDevice::~SetAudioDevice() {
  // @@protoc_insertion_point(destructor:xpilot.SetAudioDevice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetAudioDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  audio_api_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAudioDevice::ArenaDtor(void* object) {
  SetAudioDevice* _this = reinterpret_cast< SetAudioDevice* >(object);
  (void)_this;
}
void SetAudioDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAudioDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAudioDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.SetAudioDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      audio_api_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      output_device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      input_device_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&com1_volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&com2_volume_) -
        reinterpret_cast<char*>(&com1_volume_)) + sizeof(com2_volume_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAudioDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string audio_api = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audio_api();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.SetAudioDevice.audio_api"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_device_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_output_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.SetAudioDevice.output_device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string input_device_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.SetAudioDevice.input_device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float com1_volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_com1_volume(&has_bits);
          com1_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float com2_volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_com2_volume(&has_bits);
          com2_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAudioDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.SetAudioDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string audio_api = 1;
  if (_internal_has_audio_api()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_api().data(), static_cast<int>(this->_internal_audio_api().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.SetAudioDevice.audio_api");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audio_api(), target);
  }

  // optional string output_device_name = 2;
  if (_internal_has_output_device_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_device_name().data(), static_cast<int>(this->_internal_output_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.SetAudioDevice.output_device_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_device_name(), target);
  }

  // optional string input_device_name = 3;
  if (_internal_has_input_device_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_device_name().data(), static_cast<int>(this->_internal_input_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.SetAudioDevice.input_device_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_device_name(), target);
  }

  // optional float com1_volume = 4;
  if (_internal_has_com1_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_com1_volume(), target);
  }

  // optional float com2_volume = 5;
  if (_internal_has_com2_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_com2_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.SetAudioDevice)
  return target;
}

size_t SetAudioDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.SetAudioDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string audio_api = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_audio_api());
    }

    // optional string output_device_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_device_name());
    }

    // optional string input_device_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_device_name());
    }

    // optional float com1_volume = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float com2_volume = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAudioDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.SetAudioDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAudioDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAudioDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.SetAudioDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.SetAudioDevice)
    MergeFrom(*source);
  }
}

void SetAudioDevice::MergeFrom(const SetAudioDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.SetAudioDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_audio_api(from._internal_audio_api());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_output_device_name(from._internal_output_device_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_input_device_name(from._internal_input_device_name());
    }
    if (cached_has_bits & 0x00000008u) {
      com1_volume_ = from.com1_volume_;
    }
    if (cached_has_bits & 0x00000010u) {
      com2_volume_ = from.com2_volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetAudioDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.SetAudioDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAudioDevice::CopyFrom(const SetAudioDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.SetAudioDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAudioDevice::IsInitialized() const {
  return true;
}

void SetAudioDevice::InternalSwap(SetAudioDevice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &audio_api_, GetArenaForAllocation(),
      &other->audio_api_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_device_name_, GetArenaForAllocation(),
      &other->output_device_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &input_device_name_, GetArenaForAllocation(),
      &other->input_device_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetAudioDevice, com2_volume_)
      + sizeof(SetAudioDevice::com2_volume_)
      - PROTOBUF_FIELD_OFFSET(SetAudioDevice, com1_volume_)>(
          reinterpret_cast<char*>(&com1_volume_),
          reinterpret_cast<char*>(&other->com1_volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAudioDevice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SetAudioDevice_2eproto_getter, &descriptor_table_SetAudioDevice_2eproto_once,
      file_level_metadata_SetAudioDevice_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::SetAudioDevice* Arena::CreateMaybeMessage< ::xpilot::SetAudioDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::SetAudioDevice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
