name: Build xPilot

on: [push]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  qt_version: 5.15.2
  BUILD_TYPE: Release
  VATSIM_CLIENT_ID: ${{ secrets.VATSIM_CLIENT_ID }}
  VATSIM_CLIENT_KEY: ${{ secrets.VATSIM_CLIENT_KEY }}
  CONFIG_ENCRYPTION_KEY: ${{ secrets.CONFIG_ENCRYPTION_KEY }}
  IB_LICENSE: ${{ secrets.INSTALLBUILDER_LICENSE }}

jobs:

  build-win:

    runs-on: windows-latest

    env:
      INSTALLBUILDER_URL: https://installbuilder.com/installbuilder-enterprise-21.9.0-windows-x64-installer.exe
      INSTALLBUILDER_DIR: ../ib

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
            setup-python: false
            version: ${{ env.qt_version }}
          
      - name: Install conan
        run: |
          python3 -m pip install --upgrade pip
          pip3 install conan
          pip3 install conan_package_tools

      - name: Initialize CMake
        run: |
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Install conan packages
        working-directory: ${{ github.workspace }}/build
        run: |
          conan install ..

      - name: CMake
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }}

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Qt Deploy
        working-directory: ${{ github.workspace }}\build\bin
        shell: bash
        run: |
          ${{ env.Qt5_DIR }}/bin/windeployqt.exe xPilot.exe \
          -qmldir="${{ github.workspace}}/Resources"
          echo "XPILOT_BIN_DIR=`pwd`" >> $GITHUB_ENV

      - name: Get version
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          echo "XPILOT_VERSION=$(cat xpilot.json | jq '(.version.major|tostring) + "." + (.version.minor|tostring) + "." + (.version.patch|tostring)')" >> $GITHUB_ENV

      - name: Setup InstallBuilder
        shell: bash
        run: |
          curl -L ${{ env.INSTALLBUILDER_URL }} --output ib.exe
          ./ib.exe --mode unattended --prefix ${{ env.INSTALLBUILDER_DIR  }}
          ${{ env.INSTALLBUILDER_DIR }}/bin/builder-cli.exe --version
          echo "$IB_LICENSE" > lic.xml
          echo "INSTALLER_SRC_PREFIX=$(pwd)" >> $GITHUB_ENV
          echo "INSTALLER_BIN_PREFIX=$XPILOT_BIN_DIR" >> $GITHUB_ENV

      - name: Create installer
        shell: bash
        run: |
          ${{ env.INSTALLBUILDER_DIR }}/bin/builder-cli.exe build installer/project.xml \
              --license lic.xml \
              --setvars project.outputDirectory=$(pwd) \
              --setvars project.version=$XPILOT_VERSION

      - uses: actions/upload-artifact@master
        with:
          name: xPilot-${{ env.XPILOT_VERSION }}-windows-x64-installer.exe
          path: xPilot-${{ env.XPILOT_VERSION }}-windows-x64-installer.exe

  build-mac:
    if: ${{ false }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: Developer certificate
        env:
          CERTIFICATE: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
        run: ./scripts/make_keychain.sh

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
            version: ${{ env.qt_version }}
          
      - name: Install conan
        run: |
          python3 -m pip install --upgrade pip
          pip3 install conan
          pip3 install conan_package_tools

      - name: Initialize CMake
        run: |
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Install conan packages
        working-directory: ${{ github.workspace }}/build
        run: |
          conan install ..

      - name: CMake
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }}

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Qt Deploy
        working-directory: ${{ github.workspace }}/build/bin
        run: |
          ${{ env.Qt5_DIR }}/bin/macdeployqt xPilot.app \
          -qmldir=${{ github.workspace}}/Resources \
          -executable=xPilot.app/Contents/MacOS/xPilot

      - name: Code signing
        working-directory: ${{ github.workspace }}/build/bin
        run: codesign --sign "${{ secrets.APPLE_SIGNING_CERTIFICATE_IDENTITY }}" --timestamp --deep xPilot.app

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Create dmg
        working-directory: ${{ github.workspace }}/build/bin
        run: |
          create-dmg \
            --volname "xPilot" \
            --volicon "${{ github.workspace }}/xpilot.icns" \
            --icon "xPilot.app" 200 190 \
            --hide-extension "xPilot.app" \
            --app-drop-link 600 185 \
            --skip-jenkins \
            "xPilot.dmg" \
            "${{ github.workspace }}/build/bin"
      
      - name: Code sign dmg
        working-directory: ${{ github.workspace }}/build/bin
        run: codesign --sign "${{ secrets.APPLE_SIGNING_CERTIFICATE_IDENTITY }}" --timestamp --deep xPilot.dmg

      - uses: actions/upload-artifact@master
        with:
          name: xPilot_MacOS
          path: ${{ github.workspace }}/build/bin/xPilot.dmg

  build-lin:
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
            version: ${{ env.qt_version }}
          
      - name: Install conan
        run: |
          python3 -m pip install --upgrade pip
          pip3 install conan
          pip3 install conan_package_tools

      - name: Initialize CMake
        run: |
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Install conan packages
        working-directory: ${{ github.workspace }}/build
        run: |
          conan install ..

      - name: CMake
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }}

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      #- name: Qt Deploy
      #  working-directory: ${{ github.workspace }}\build\bin
      #  run: |
      #    ${{ env.Qt5_DIR }}\bin\windeployqt xPilot.exe \
      #    -qmldir="${{ github.workspace}}\Resources"

      - uses: actions/upload-artifact@master
        with:
          name: xPilot_Linux
          path: build/bin/xPilot
