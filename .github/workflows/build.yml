name: Build xPilot

on: push

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  QT_VERSION: 5.15.2
  BUILD_TYPE: RelWithDebInfo
  VATSIM_CLIENT_ID: ${{ secrets.VATSIM_CLIENT_ID }}
  VATSIM_CLIENT_KEY: ${{ secrets.VATSIM_CLIENT_KEY }}
  CONFIG_ENCRYPTION_KEY: ${{ secrets.CONFIG_ENCRYPTION_KEY }}
  IB_LICENSE: ${{ secrets.INSTALLBUILDER_LICENSE }}
  IB_DIR: ../ib

jobs:

  ########################## Build Linux ##########################
  
  build-linux:

    #if: ${{ false }}

    runs-on: ubuntu-latest

    env:
      IB_URL: https://installbuilder.com/installbuilder-enterprise-21.9.0-linux-x64-installer.run

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
            setup-python: false
            version: ${{ env.QT_VERSION }}
          
      - name: Install conan
        run: |
          python3 -m pip install --upgrade pip
          pip3 install conan
          pip3 install conan_package_tools

      - name: Initialize CMake
        run: |
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Install conan packages
        working-directory: ${{ github.workspace }}/build
        run: |
          conan install ..

      - name: CMake
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }}

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Install LinuxDeploy
        uses: miurahr/install-linuxdeploy-action@v1
        with:
          dir: ${{ github.workspace }}
          plugins: qt appimage
      
      - name: Create AppImage
        run: |
          export QML_SOURCES_PATHS=${{ github.workspace }}/Resources
          mkdir -p appdir/usr/bin
          ${{ github.workspace }}/linuxdeploy-x86_64.AppImage --plugin=qt --output=appimage --desktop-file=${{ github.workspace }}/xpilot.desktop --executable=${{ github.workspace }}/build/bin/xPilot --appdir=appdir --icon-file=xPilot.png
          mkdir -p ${{ github.workspace }}/output && mv xPilot*.AppImage ${{ github.workspace }}/output/xPilot.AppImage

      - name: Get version
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          echo "XPILOT_VERSION=$(cat xpilot.json | cat xpilot.json | jq -r '"\(.version.major).\(.version.minor).\(.version.patch)"')" >> $GITHUB_ENV

      - name: Setup InstallBuilder
        shell: bash
        run: |
          curl -L ${{ env.IB_URL }} --output ib.run
          chmod +x ib.run
          ./ib.run --mode unattended --prefix ${{ env.IB_DIR }}
          ${{ env.IB_DIR }}/bin/builder --version
          echo "$IB_LICENSE" > lic.xml
          echo "INSTALLER_SRC_PREFIX=$(pwd)" >> $GITHUB_ENV
          echo "INSTALLER_BIN_PREFIX=${{ github.workspace }}/output" >> $GITHUB_ENV

      - name: Create installer
        shell: bash
        run: |
          ${{ env.IB_DIR }}/bin/builder build installer/project.xml \
              --license lic.xml \
              --setvars project.outputDirectory=$(pwd) \
              --setvars project.version=${{ env.XPILOT_VERSION }}

      - uses: actions/upload-artifact@v1
        with:
          name: xPilot-${{ env.XPILOT_VERSION }}-linux-x64-installer.run
          path: xPilot-${{ env.XPILOT_VERSION }}-linux-x64-installer.run

  ########################## Build Windows ##########################
  
  build-windows:

    if: ${{ false }}

    runs-on: windows-latest

    env:
      IB_URL: https://installbuilder.com/installbuilder-enterprise-21.9.0-windows-x64-installer.exe

    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
            setup-python: false
            version: ${{ env.QT_VERSION }}
          
      - name: Install conan
        run: |
          python3 -m pip install --upgrade pip
          pip3 install conan
          pip3 install conan_package_tools

      - name: Initialize CMake
        run: |
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Install conan packages
        working-directory: ${{ github.workspace }}/build
        run: |
          conan install ..

      - name: CMake
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }}

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Qt Deploy
        working-directory: ${{ github.workspace }}\build\bin
        shell: bash
        run: |
          ${{ env.Qt5_DIR }}/bin/windeployqt.exe xPilot.exe \
          -qmldir="${{ github.workspace}}/Resources"
          echo "XPILOT_BIN_DIR=`pwd`" >> $GITHUB_ENV

      - name: Get version
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          echo "XPILOT_VERSION=$(cat xpilot.json | cat xpilot.json | jq -r '"\(.version.major).\(.version.minor).\(.version.patch)"')" >> $GITHUB_ENV

      - name: Setup InstallBuilder
        shell: bash
        run: |
          curl -L ${{ env.IB_URL }} --output ib.exe
          ./ib.exe --mode unattended --prefix ${{ env.IB_DIR  }}
          ${{ env.IB_DIR }}/bin/builder-cli.exe --version
          echo "$IB_LICENSE" > lic.xml
          echo "INSTALLER_SRC_PREFIX=$(pwd)" >> $GITHUB_ENV
          echo "INSTALLER_BIN_PREFIX=$XPILOT_BIN_DIR" >> $GITHUB_ENV

      - name: Create installer
        shell: bash
        run: |
          ${{ env.IB_DIR }}/bin/builder-cli.exe build installer/project.xml \
              --license lic.xml \
              --setvars project.outputDirectory=$(pwd) \
              --setvars project.version=${{ env.XPILOT_VERSION }}

      - uses: actions/upload-artifact@master
        with:
          name: xPilot-${{ env.XPILOT_VERSION }}-windows-x64-installer.exe
          path: xPilot-${{ env.XPILOT_VERSION }}-windows-x64-installer.exe

  ########################## Build macOS ##########################
  
  build-macos:

    if: ${{ false }}
  
    runs-on: macos-latest

    env:
      IB_URL: https://installbuilder.com/installbuilder-enterprise-21.9.0-osx-installer.dmg

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: Developer certificate
        env:
          CERTIFICATE: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
        run: ./scripts/make_keychain.sh

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
            setup-python: false
            version: ${{ env.QT_VERSION }}
          
      - name: Install conan
        run: |
          python3 -m pip install --upgrade pip
          pip3 install conan
          pip3 install conan_package_tools

      - name: Initialize CMake
        run: |
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Install conan packages
        working-directory: ${{ github.workspace }}/build
        run: |
          conan install ..

      - name: CMake
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }}

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Qt Deploy
        working-directory: ${{ github.workspace }}/build/bin
        run: |
          ${{ env.Qt5_DIR }}/bin/macdeployqt xPilot.app \
          -qmldir=${{ github.workspace}}/Resources \
          -executable=xPilot.app/Contents/MacOS/xPilot
          echo "XPILOT_BIN_DIR=`pwd`" >> $GITHUB_ENV

      - name: Code signing
        working-directory: ${{ github.workspace }}/build/bin
        run: codesign --sign "${{ secrets.APPLE_SIGNING_CERTIFICATE_IDENTITY }}" --timestamp --deep -o runtime xPilot.app

      - name: Get version
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          echo "XPILOT_VERSION=$(cat xpilot.json | cat xpilot.json | jq -r '"\(.version.major).\(.version.minor).\(.version.patch)"')" >> $GITHUB_ENV

      - name: Setup InstallBuilder
        shell: bash
        run: |
          curl -L ${{ env.IB_URL }} --output ib.dmg
          hdiutil attach ib.dmg
          /Volumes/InstallBuilder\ Enterprise/*.app/Contents/MacOS/installbuilder.sh --mode unattended --prefix ${{ env.IB_DIR }}
          ${{ env.IB_DIR }}/bin/builder --version
          echo "$IB_LICENSE" > lic.xml
          echo "INSTALLER_SRC_PREFIX=$(pwd)" >> $GITHUB_ENV
          echo "INSTALLER_BIN_PREFIX=$XPILOT_BIN_DIR" >> $GITHUB_ENV

      - name: Create installer
        shell: bash
        run: |
          ${{ env.IB_DIR }}/bin/builder build installer/project.xml \
              --license lic.xml \
              --setvars project.outputDirectory=$(pwd) \
              --setvars project.version=${{ env.XPILOT_VERSION }} \
              --setvars apple_signing_identity=${{ secrets.APPLE_SIGNING_CERTIFICATE_IDENTITY }} \
              --setvars password=${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}

      - name: Notarize Installer
        shell: bash
        run: |
          xcrun altool --notarize-app \
          --primary-bundle-id "com.vatsim.xpilot" \
          --username "${{ secrets.NOTARIZATION_USERNAME }}" \
          --password "${{ secrets.NOTARIZATION_PASSWORD }}" \
          --file xPilot-${{ env.XPILOT_VERSION }}-osx-installer.dmg

      - uses: actions/upload-artifact@master
        with:
          name: xPilot-${{ env.XPILOT_VERSION }}-osx-installer.dmg
          path: xPilot-${{ env.XPILOT_VERSION }}-osx-installer.dmg