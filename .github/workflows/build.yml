name: 'Build xPilot'

on:
  workflow_dispatch:
  push:

env:
  QT_VERSION: 6.3.2
  BUILD_TYPE: Release
  VATSIM_CLIENT_ID: ${{ secrets.VATSIM_CLIENT_ID }}
  VATSIM_CLIENT_KEY: ${{ secrets.VATSIM_CLIENT_KEY }}
  CONFIG_ENCRYPTION_KEY: ${{ secrets.CONFIG_ENCRYPTION_KEY }}
  CLIENT_DIR: ${{ github.workspace }}/client
  PLUGIN_DIR: ${{ github.workspace }}/plugin
  IB_LICENSE: ${{ secrets.INSTALLBUILDER_LICENSE }}
  IB_DIR: ../ib

jobs:

  ########################## Build Windows ##########################

  build-windows:

    if: ${{ false }}

    runs-on: windows-latest

    env:
      IB_URL: https://xpilot-project.org/ib/installbuilder-enterprise-22.8.0-windows-x64-installer.exe

    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      ### Buid Plugin ###

      # - name: Build plugin
      #   working-directory: ${{ env.PLUGIN_DIR }}
      #   run: |
      #     mkdir build
      #     cd build
      #     cmake ..
      #     cmake --build . --config ${{ env.BUILD_TYPE }}

      # - name: Package plugin
      #   run: |
      #     mkdir -p ${{ github.workspace }}/xPilot/win_x64
      #     cp ${{ env.PLUGIN_DIR }}/build/win_x64/xPilot.xpl ${{ github.workspace }}/xPilot/win_x64
      #     cp ${{ env.PLUGIN_DIR }}/build/win_x64/xPilot.pdb ${{ github.workspace }}/xPilot/win_x64
      #     cp ${{ github.workspace }}/externals/fmod/fmod.dll ${{ github.workspace }}/xPilot/win_x64
      #     cp -R ${{ github.workspace }}/plugin/Resources ${{ github.workspace }}/xPilot/

      ### Build Client ###

      - name: Download Qt
        uses: robinraju/release-downloader@v1.5
        with:
          repository: "xpilot-project/qt6"
          tag: "v6.3.2"
          fileName: "windows.7z"
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      - name: Setup Qt
        run: |
          7z x -oqt6 windows.7z
          echo "Qt6_DIR=$(pwd)/qt6" >> $env:GITHUB_ENV
          echo "QT_PLUGIN_PATH=$(pwd)/qt6/plugins" >> $env:GITHUB_ENV
          echo "QML2_IMPORT_PATH=$(pwd)/qt6/qml" >> $env:GITHUB_ENV
          echo "EXTERNAL_LIBS=$(pwd)/externals" >> $env:GITHUB_ENV

      - name: Build client
        working-directory: ${{ env.CLIENT_DIR }}
        run: |
          mkdir build
          cd build
          cmake .. `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} `
            -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} `
            -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }} `
            -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} `
            -DCMAKE_LIBRARY_PATH=${{ env.EXTERNAL_LIBS }}/windows/wmf
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: xpilot
          path: ${{ env.CLIENT_DIR }}/build/Release/xPilot.exe

      # - name: Create client build directory
      #   working-directory: ${{ env.CLIENT_DIR }}
      #   run: |
      #     cmake -E make_directory build

      # - name: CMake client build files
      #   working-directory: ${{ env.CLIENT_DIR }}/build
      #   run: |
      #     cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
      #       -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} `
      #       -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} `
      #       -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }}

      # - name: Build client
      #   working-directory: ${{ env.CLIENT_DIR }}/build
      #   run: |
      #     cmake --build . --config ${{ env.BUILD_TYPE }}

      # - name: Deploy application
      #   working-directory: ${{ env.CLIENT_DIR }}/build/RelWithDebInfo
      #   shell: bash
      #   run: |
      #     ${{ env.Qt6_DIR }}/bin/windeployqt.exe xPilot.exe \
      #     -qmldir="${{ env.CLIENT_DIR }}/Resources"
      #     echo "XPILOT_BIN_DIR=`pwd`" >> $GITHUB_ENV

      # - name: Get version
      #   shell: bash
      #   run: |
      #     echo "XPILOT_VERSION=$(cat xpilot.json | jq -r 'if .is_beta == true then "\(.version.major).\(.version.minor).\(.version.patch)-beta.\(.beta_number)" else "\(.version.major).\(.version.minor).\(.version.patch)" end')" >> $GITHUB_ENV

      # - name: Setup InstallBuilder
      #   shell: bash
      #   run: |
      #     curl -k -L ${{ env.IB_URL }} --output ib.exe
      #     ./ib.exe --mode unattended --prefix ${{ env.IB_DIR  }}
      #     ${{ env.IB_DIR }}/bin/builder-cli.exe --version
      #     echo "$IB_LICENSE" > lic.xml
      #     echo "CLIENT_BUILD_DIR=$XPILOT_BIN_DIR" >> $GITHUB_ENV
      #     echo "PLUGIN_BUILD_DIR=${{ github.workspace }}/xPilot" >> $GITHUB_ENV

      # - name: Create installer
      #   shell: bash
      #   run: |
      #     ${{ env.IB_DIR }}/bin/builder-cli.exe build installer/windows.xml \
      #         --license lic.xml \
      #         --setvars project.outputDirectory=$(pwd) \
      #         --setvars project.version=${{ env.XPILOT_VERSION }}

      # - name: Rename Installer
      #   shell: bash
      #   run: |
      #     mv xPilot-${{ env.XPILOT_VERSION }}-windows-x64-installer.exe xPilot-${{ env.XPILOT_VERSION }}-Windows.exe

      # - name: Upload installer artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: xPilot-${{ env.XPILOT_VERSION }}-Windows.zip
      #     path: |
      #       xPilot-${{ env.XPILOT_VERSION }}-Windows.exe

  ##########################  Build macOS  ##########################

  build-macos:

    #if: ${{ false }}
  
    runs-on: macos-latest

    env:
      IB_URL: https://xpilot-project.org/ib/installbuilder-enterprise-22.8.0-osx-installer.dmg
      MIN_OS_VERSION: 10.14

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Load developer certificate
        env:
          CERTIFICATE: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
        run: ./scripts/make_keychain.sh

      ### Buid Plugin ###

      # - name: Build plugin
      #   working-directory: ${{ env.PLUGIN_DIR }}
      #   run: |
      #     mkdir build && cd build
      #     cmake .. && cmake --build . --config ${{ env.BUILD_TYPE }}

      # - name: Extract debug symbols
      #   working-directory: ${{ env.PLUGIN_DIR }}/build/mac_x64
      #   run: |
      #     dsymutil xPilot.xpl -o xPilot.dSYM

      # - name: Package plugin
      #   run: |
      #     mkdir -p ${{ github.workspace }}/xPilot/mac_x64
      #     cp ${{ env.PLUGIN_DIR }}/build/mac_x64/xPilot.xpl ${{ github.workspace }}/xPilot/mac_x64
      #     cp -R ${{ env.PLUGIN_DIR }}/build/mac_x64/xPilot.dSYM ${{ github.workspace }}/xPilot/mac_x64
      #     cp ${{ github.workspace }}/externals/fmod/libfmod.dylib ${{ github.workspace }}/xPilot/mac_x64
      #     cp -R ${{ github.workspace }}/plugin/Resources ${{ github.workspace }}/xPilot/

      # - name: Fix FMOD search path
      #   working-directory: ${{ github.workspace }}/xPilot/mac_x64
      #   run: |
      #     install_name_tool -id @executable_path/../../../Resources/plugins/xPilot/mac_x64/libfmod.dylib libfmod.dylib
      #     install_name_tool -change @rpath/libfmod.dylib @executable_path/../../../Resources/plugins/xPilot/mac_x64/libfmod.dylib xPilot.xpl

      ### Build Client ###

      - name: Download Qt
        uses: robinraju/release-downloader@v1.5
        with:
          repository: "xpilot-project/qt6"
          tag: "v6.3.2"
          fileName: "macos.7z"
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup Qt
        run: |
          7z x -oqt6 macos.7z
          echo "Qt6_DIR=$(pwd)/qt6" >> $GITHUB_ENV
          echo "QT_PLUGIN_PATH=$(pwd)/qt6/plugins" >> $GITHUB_ENV
          echo "QML2_IMPORT_PATH=$(pwd)/qt6/qml" >> $GITHUB_ENV

      - name: Build client
        working-directory: ${{ env.CLIENT_DIR }}
        run: |
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} \
            -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} \
            -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }} \
            -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }}
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: xpilot
          path: ${{ env.CLIENT_DIR }}/build/xPilot.app

      # - name: Install Qt
      #   uses: jurplel/install-qt-action@v3
      #   with:
      #       setup-python: false
      #       version: ${{ env.QT_VERSION }}

      # - name: Create client build directory
      #   working-directory: ${{ env.CLIENT_DIR }}
      #   run: |
      #     cmake -E make_directory build

      # - name: Install client dependencies
      #   working-directory: ${{ env.CLIENT_DIR }}/build
      #   run: |
      #     conan install .. --build=missing

      # - name: CMake client build files
      #   working-directory: ${{ env.CLIENT_DIR }}/build
      #   run: |
      #     cmake .. \
      #       -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.MIN_OS_VERSION }} \
      #       -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
      #       -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} \
      #       -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} \
      #       -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }}

      # - name: Build client
      #   working-directory: ${{ env.CLIENT_DIR }}/build
      #   run: |
      #     cmake --build . --config ${{ env.BUILD_TYPE }}

      # - name: Extract debug symbols
      #   working-directory: ${{ env.CLIENT_DIR }}/build/bin
      #   run: |
      #     dsymutil xPilot.app/Contents/MacOS/xPilot -o xPilot.dSYM

      # - name: Deploy application
      #   working-directory: ${{ env.CLIENT_DIR }}/build/bin
      #   run: |
      #     ${{ env.Qt6_DIR }}/bin/macdeployqt xPilot.app \
      #     -qmldir=${{ env.CLIENT_DIR }}/Resources \
      #     -executable=xPilot.app/Contents/MacOS/xPilot \
      #     -sign-for-notarization="${{ secrets.APPLE_SIGNING_CERTIFICATE_IDENTITY }}"
      #     echo "XPILOT_BIN_DIR=`pwd`" >> $GITHUB_ENV

      # - name: Get version
      #   shell: bash
      #   run: |
      #     echo "XPILOT_VERSION=$(cat xpilot.json | jq -r 'if .is_beta == true then "\(.version.major).\(.version.minor).\(.version.patch)-beta.\(.beta_number)" else "\(.version.major).\(.version.minor).\(.version.patch)" end')" >> $GITHUB_ENV

      # - name: Setup InstallBuilder
      #   shell: bash
      #   run: |
      #     curl -k -L ${{ env.IB_URL }} --output ib.dmg
      #     hdiutil attach ib.dmg
      #     /Volumes/InstallBuilder\ Enterprise/*.app/Contents/MacOS/installbuilder.sh --mode unattended --prefix ${{ env.IB_DIR }}
      #     ${{ env.IB_DIR }}/bin/builder --version
      #     echo "$IB_LICENSE" > lic.xml
      #     echo "CLIENT_BUILD_DIR=$XPILOT_BIN_DIR" >> $GITHUB_ENV
      #     echo "PLUGIN_BUILD_DIR=${{ github.workspace }}/xPilot" >> $GITHUB_ENV

      # - name: Create installer
      #   shell: bash
      #   run: |
      #     ${{ env.IB_DIR }}/bin/builder build installer/macos.xml \
      #         --license lic.xml \
      #         --setvars project.outputDirectory=$(pwd) \
      #         --setvars project.version=${{ env.XPILOT_VERSION }} \
      #         --setvars apple_signing_identity=${{ secrets.APPLE_SIGNING_CERTIFICATE_IDENTITY }} \
      #         --setvars password=${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}

      # - name: Rename Installer
      #   shell: bash
      #   run: |
      #     mv xPilot-${{ env.XPILOT_VERSION }}-osx-installer.dmg xPilot-${{ env.XPILOT_VERSION }}-MacOS.dmg

      # - name: Notarize installer
      #   shell: bash
      #   run: |
      #     xcrun altool --notarize-app \
      #     --primary-bundle-id "org.vatsim.xpilot" \
      #     --username "${{ secrets.NOTARIZATION_USERNAME }}" \
      #     --password "${{ secrets.NOTARIZATION_PASSWORD }}" \
      #     --file xPilot-${{ env.XPILOT_VERSION }}-MacOS.dmg

      # - name: Upload installer artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: xPilot-${{ env.XPILOT_VERSION }}-MacOS.zip
      #     path: |
      #       xPilot-${{ env.XPILOT_VERSION }}-MacOS.dmg

  ##########################  Build Linux  ##########################

  build-linux:

    if: ${{ false }}

    runs-on: ubuntu-20.04

    env:
      IB_URL: https://xpilot-project.org/ib/installbuilder-enterprise-22.8.0-linux-x64-installer.run

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev \
          libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev \
          libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev \
          libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev \
          libglu1-mesa-dev freeglut3-dev mesa-common-dev libglfw3-dev libgles2-mesa-dev
          sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev \
          gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
          gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl \
          gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio
          
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      ### Buid Plugin ###

      # - name: Build plugin
      #   working-directory: ${{ env.PLUGIN_DIR }}
      #   run: |
      #     mkdir build && cd build
      #     cmake .. && cmake --build . --config ${{ env.BUILD_TYPE }}

      # - name: Package plugin
      #   run: |
      #     mkdir -p ${{ github.workspace }}/xPilot/lin_x64
      #     cp ${{ env.PLUGIN_DIR }}/build/lin_x64/xPilot.xpl ${{ github.workspace }}/xPilot/lin_x64
      #     cp ${{ github.workspace }}/externals/fmod/libfmod.so ${{ github.workspace }}/xPilot/lin_x64
      #     cp -R ${{ github.workspace }}/plugin/Resources ${{ github.workspace }}/xPilot/

      # - name: Extract debug symbols
      #   if: github.ref_type == 'tag' && contains(github.ref_name, 'v')
      #   working-directory: ${{ env.PLUGIN_DIR }}/build/lin_x64
      #   run: |
      #     objcopy --only-keep-debug xPilot.xpl xPilot.debug
      #     cp ${{ env.PLUGIN_DIR }}/build/lin_x64/xPilot.debug ${{ github.workspace }}/xPilot/lin_x64

      ### Build Client ###

      - name: Download Qt
        uses: robinraju/release-downloader@v1.5
        with:
          repository: "xpilot-project/qt6"
          tag: "v6.3.2"
          fileName: "linux.7z"
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      - name: Setup Qt
        run: |
          7z x -oqt6 linux.7z
          echo "Qt6_DIR=$(pwd)/qt6" >> $GITHUB_ENV
          echo "QT_PLUGIN_PATH=$(pwd)/qt6/plugins" >> $GITHUB_ENV
          echo "QML2_IMPORT_PATH=$(pwd)/qt6/qml" >> $GITHUB_ENV
          echo "$(pwd)/qt6/bin" >> $GITHUB_PATH
          chmod -R +x qt6

      - name: Build client
        working-directory: ${{ env.CLIENT_DIR }}
        run: |
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} \
            -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} \
            -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }} \
            -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} \
            -DOPENSSL_ROOT_DIR=${{ github.workspace }}/externals/linux/openssl
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: xpilot
          path: ${{ env.CLIENT_DIR }}/build/xPilot

      # - name: Extract debug symbols
      #   working-directory: ${{ env.CLIENT_DIR }}/build
      #   run: |
      #     mv xPilot xpilot
      #     objcopy --only-keep-debug xpilot xpilot.debug
        
      # - name: Install LinuxDeploy
      #   uses: miurahr/install-linuxdeploy-action@v1
      #   with:
      #     dir: ${{ github.workspace }}
      #     plugins: appimage

      # - name: Deploy application
      #   run: |
      #     mkdir -p AppDir/usr/bin
      #     cp ${{ env.CLIENT_DIR }}/build/xpilot AppDir/usr/bin
      #     linuxdeploy-x86_64.AppImage \
      #       --output=appimage \
      #       --create-desktop-file \
      #       --executable=${{ env.CLIENT_DIR }}/build/xpilot \
      #       --appdir=AppDir \
      #       --icon-file=${{ env.CLIENT_DIR }}/xpilot.png
      #     mkdir -p ${{ github.workspace }}/output && mv xpilot*.AppImage ${{ github.workspace }}/output/xPilot.AppImage
      #     cp ${{ env.CLIENT_DIR }}/xpilot.png ${{ github.workspace }}/output

      # - name: Get version
      #   run: |
      #     echo "XPILOT_VERSION=$(cat xpilot.json | jq -r 'if .is_beta == true then "\(.version.major).\(.version.minor).\(.version.patch)-beta.\(.beta_number)" else "\(.version.major).\(.version.minor).\(.version.patch)" end')" >> $GITHUB_ENV

      # - name: Setup InstallBuilder
      #   run: |
      #     curl -k -L ${{ env.IB_URL }} --output ib.run
      #     chmod +x ib.run
      #     ./ib.run --mode unattended --prefix ${{ env.IB_DIR }}
      #     ${{ env.IB_DIR }}/bin/builder --version
      #     echo "$IB_LICENSE" > lic.xml
      #     echo "CLIENT_BUILD_DIR=${{ github.workspace }}/output" >> $GITHUB_ENV
      #     echo "PLUGIN_BUILD_DIR=${{ github.workspace }}/xPilot" >> $GITHUB_ENV

      # - name: Create installer
      #   run: |
      #     ${{ env.IB_DIR }}/bin/builder build installer/linux.xml \
      #         --license lic.xml \
      #         --setvars project.outputDirectory=$(pwd) \
      #         --setvars project.version=${{ env.XPILOT_VERSION }}

      # - name: Rename Installer
      #   shell: bash
      #   run: |
      #     mv xPilot-${{ env.XPILOT_VERSION }}-linux-x64-installer.run xPilot-${{ env.XPILOT_VERSION }}-Linux.run

      # - name: Upload installer artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: xPilot-${{ env.XPILOT_VERSION }}-Linux.zip
      #     path: |
      #       xPilot-${{ env.XPILOT_VERSION }}-Linux.run

  ########################## Create Release ##########################

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    if: github.ref_type == 'tag' && contains(github.ref_name, 'v')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Get version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Reorganize
        run: mv xPilot*/* . && rmdir xPilot*/

      - name: List directory contents
        run: ls -R

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          name: xPilot ${{ steps.get_version.outputs.version }}
          prerelease: true
          draft: true
          files: xPilot*
