name: Build xPilot

on:
  push:
    branches:
      - 'dev/*'
    tags:
      - 'v*'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  QT_VERSION: 5.15.2
  BUILD_TYPE: RelWithDebInfo
  VATSIM_CLIENT_ID: ${{ secrets.VATSIM_CLIENT_ID }}
  VATSIM_CLIENT_KEY: ${{ secrets.VATSIM_CLIENT_KEY }}
  CONFIG_ENCRYPTION_KEY: ${{ secrets.CONFIG_ENCRYPTION_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  CLIENT_DIR: ${{ github.workspace }}/client
  PLUGIN_DIR: ${{ github.workspace }}/plugin
  IB_LICENSE: ${{ secrets.INSTALLBUILDER_LICENSE }}
  IB_DIR: ../ib

jobs:

  ########################## Build Linux ##########################
  
  build-linux:

    #if: ${{ false }}

    runs-on: ubuntu-latest

    env:
      IB_URL: https://installbuilder.com/installbuilder-enterprise-21.9.0-linux-x64-installer.run

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libasound2-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev python3-setuptools
          
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          
      - name: Install conan
        run: |
          python3 -m pip install --upgrade pip
          pip3 install conan
          pip3 install conan_package_tools

      ### Buid Plugin ###

      - name: Create plugin build directory
        working-directory: ${{ env.PLUGIN_DIR }}
        run: |
          cmake -E make_directory build

      - name: Install plugin conan packages
        working-directory: ${{ env.PLUGIN_DIR }}/build
        run: |
          conan install .. --build=missing

      - name: Plugin CMake
        working-directory: ${{ env.PLUGIN_DIR }}/build
        run: |
          cmake ..

      - name: Build plugin
        working-directory: ${{ env.PLUGIN_DIR }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Extract debug symbols
        working-directory: ${{ env.PLUGIN_DIR }}/build/lin_x64
        run: |
          objcopy --only-keep-debug xPilot.xpl xPilot.debug

      - name: Package plugin
        run: |
          mkdir -p ${{ github.workspace }}/xPilot/lin_x64
          cp ${{ env.PLUGIN_DIR }}/build/lin_x64/xPilot.xpl ${{ github.workspace }}/xPilot/lin_x64
          cp ${{ env.PLUGIN_DIR }}/build/lin_x64/xPilot.debug ${{ github.workspace }}/xPilot/lin_x64
          cp -R ${{ github.workspace }}/plugin/externals/fmod/lin/libfmod* ${{ github.workspace }}/xPilot/lin_x64
          cp -R ${{ github.workspace }}/plugin/Resources ${{ github.workspace }}/xPilot/

      ### Build Client ###

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
            setup-python: false
            version: ${{ env.QT_VERSION }}

      - name: Create client build directory
        working-directory: ${{ env.CLIENT_DIR }}
        run: |
          cmake -E make_directory build

      - name: Install client conan packages
        working-directory: ${{ env.CLIENT_DIR }}/build
        run: |
          conan install .. --build=missing

      - name: Client CMake
        working-directory: ${{ env.CLIENT_DIR }}/build
        run: |
          cmake ${{ env.CLIENT_DIR }} \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} \
            -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} \
            -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }} \
            -DSENTRY_DSN=${{ env.SENTRY_DSN }} \
            -DSENTRY_BACKEND=crashpad \
            -DSENTRY_INTEGRATION_QT=YES

      - name: Build client
        working-directory: ${{ env.CLIENT_DIR }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Extract debug symbols
        working-directory: ${{ env.CLIENT_DIR }}/build/bin
        run: |
          mv xPilot xpilot
          objcopy --only-keep-debug xpilot xpilot.debug

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@1.2.0
        with:
          version: latest
          token: ${{ secrets.SENTRY_TOKEN }}
          organization: xpilot
          project: xpilot

      - name: Upload debug information files
        working-directory: ${{ env.CLIENT_DIR }}/build/bin
        run: |
          sentry-cli upload-dif xpilot xpilot.debug

      - name: Install LinuxDeploy
        uses: miurahr/install-linuxdeploy-action@v1
        with:
          dir: ${{ github.workspace }}
          plugins: qt appimage
      
      - name: Create AppImage
        run: |
          export QML_SOURCES_PATHS=${{ env.CLIENT_DIR }}/Resources
          mkdir -p AppDir/usr/bin
          cp ${{ env.CLIENT_DIR }}/build/bin/xpilot AppDir/usr/bin
          linuxdeploy-x86_64.AppImage \
            --plugin=qt \
            --output=appimage \
            --create-desktop-file \
            --executable=${{ env.CLIENT_DIR }}/build/bin/xpilot \
            --appdir=AppDir \
            --icon-file=${{ env.CLIENT_DIR }}/xpilot.png
          mkdir -p ${{ github.workspace }}/output && mv xpilot*.AppImage ${{ github.workspace }}/output/xPilot.AppImage
          cp ${{ env.CLIENT_DIR }}/xpilot.png ${{ github.workspace }}/output

      - name: Get version
        shell: bash
        run: |
          echo "XPILOT_VERSION=$(cat xpilot.json | jq -r 'if .is_beta == true then "\(.version.major).\(.version.minor).\(.version.patch)-beta.\(.beta_number)" else "\(.version.major).\(.version.minor).\(.version.patch)" end')" >> $GITHUB_ENV

      - name: Setup InstallBuilder
        shell: bash
        run: |
          curl -k -L ${{ env.IB_URL }} --output ib.run
          chmod +x ib.run
          ./ib.run --mode unattended --prefix ${{ env.IB_DIR }}
          ${{ env.IB_DIR }}/bin/builder --version
          echo "$IB_LICENSE" > lic.xml
          echo "INSTALLER_SRC_PREFIX=$(pwd)/client" >> $GITHUB_ENV
          echo "INSTALLER_BIN_PREFIX=${{ github.workspace }}/output" >> $GITHUB_ENV
          echo "REPO_ROOT_PREFIX=$(pwd)" >> $GITHUB_ENV
          echo "INSTALLER_PLUGIN_PREFIX=${{ github.workspace }}/xPilot" >> $GITHUB_ENV

      - name: Create installer
        shell: bash
        run: |
          ${{ env.IB_DIR }}/bin/builder build installer/project.xml \
              --license lic.xml \
              --setvars project.outputDirectory=$(pwd) \
              --setvars project.version=${{ env.XPILOT_VERSION }}

      - name: Upload installer and plugin files
        uses: actions/upload-artifact@v2
        with:
          name: xPilot-${{ env.XPILOT_VERSION }}-Linux.zip
          path: |
            xPilot-${{ env.XPILOT_VERSION }}-linux-x64-installer.run

  ########################## Build Windows ##########################
  
  build-windows:

    #if: ${{ false }}

    runs-on: windows-latest

    env:
      IB_URL: https://installbuilder.com/installbuilder-enterprise-21.9.0-windows-x64-installer.exe

    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive
          
      - name: Install Conan
        run: |
          python3 -m pip install --upgrade pip
          pip3 install conan
          pip3 install conan_package_tools

      ### Buid Plugin ###

      - name: Create plugin build directory
        working-directory: ${{ env.PLUGIN_DIR }}
        run: |
          cmake -E make_directory build

      - name: Install plugin conan packages
        working-directory: ${{ env.PLUGIN_DIR }}/build
        run: |
          conan install .. -s compiler.runtime=MT -o openal:shared=True --build=missing

      - name: Plugin CMake
        working-directory: ${{ env.PLUGIN_DIR }}/build
        run: |
          cmake ..

      - name: Build plugin
        working-directory: ${{ env.PLUGIN_DIR }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Package plugin
        run: |
          mkdir -p ${{ github.workspace }}/xPilot/win_x64
          cp ${{ env.PLUGIN_DIR }}/build/win_x64/xPilot.xpl ${{ github.workspace }}/xPilot/win_x64
          cp ${{ env.PLUGIN_DIR }}/build/win_x64/xPilot.pdb ${{ github.workspace }}/xPilot/win_x64
          cp -R ${{ github.workspace }}/plugin/externals/fmod/win ${{ github.workspace }}/xPilot/win_x64
          cp -R ${{ github.workspace }}/plugin/Resources ${{ github.workspace }}/xPilot/

      ### Build Client ###

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
            setup-python: false
            version: ${{ env.QT_VERSION }}

      - name: Create client build directory
        working-directory: ${{ env.CLIENT_DIR }}
        run: |
          cmake -E make_directory build

      - name: Install client conan packages
        working-directory: ${{ env.CLIENT_DIR }}/build
        run: |
          conan install .. --build=missing

      - name: Client CMake
        working-directory: ${{ env.CLIENT_DIR }}/build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }} -DSENTRY_DSN=${{ env.SENTRY_DSN }} -DSENTRY_BACKEND=crashpad -DSENTRY_INTEGRATION_QT=YES

      - name: Build client
        working-directory: ${{ env.CLIENT_DIR }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@1.2.0
        with:
          version: latest
          token: ${{ secrets.SENTRY_TOKEN }}
          organization: xpilot
          project: xpilot

      - name: Upload debug information files
        working-directory: ${{ env.CLIENT_DIR }}/build/bin
        run: |
          sentry-cli upload-dif xPilot.exe xPilot.pdb

      - name: Deploy Qt application
        working-directory: ${{ env.CLIENT_DIR }}/build/bin
        shell: bash
        run: |
          ${{ env.Qt5_DIR }}/bin/windeployqt.exe xPilot.exe \
          -qmldir="${{ env.CLIENT_DIR }}/Resources"
          echo "XPILOT_BIN_DIR=`pwd`" >> $GITHUB_ENV

      - name: Copy OpenSSL libraries
        shell: bash
        run: |
          cp client/externals/windows/libcrypto-1_1-x64.dll "$XPILOT_BIN_DIR"
          cp client/externals/windows/libssl-1_1-x64.dll "$XPILOT_BIN_DIR"

      - name: Get version
        shell: bash
        run: |
          echo "XPILOT_VERSION=$(cat xpilot.json | jq -r 'if .is_beta == true then "\(.version.major).\(.version.minor).\(.version.patch)-beta.\(.beta_number)" else "\(.version.major).\(.version.minor).\(.version.patch)" end')" >> $GITHUB_ENV

      - name: Setup InstallBuilder
        shell: bash
        run: |
          curl -k -L ${{ env.IB_URL }} --output ib.exe
          ./ib.exe --mode unattended --prefix ${{ env.IB_DIR  }}
          ${{ env.IB_DIR }}/bin/builder-cli.exe --version
          echo "$IB_LICENSE" > lic.xml
          echo "INSTALLER_SRC_PREFIX=$(pwd)/client" >> $GITHUB_ENV
          echo "INSTALLER_BIN_PREFIX=$XPILOT_BIN_DIR" >> $GITHUB_ENV
          echo "REPO_ROOT_PREFIX=$(pwd)" >> $GITHUB_ENV
          echo "INSTALLER_PLUGIN_PREFIX=${{ github.workspace }}/xPilot" >> $GITHUB_ENV

      - name: Create installer
        shell: bash
        run: |
          ${{ env.IB_DIR }}/bin/builder-cli.exe build installer/project.xml \
              --license lic.xml \
              --setvars project.outputDirectory=$(pwd) \
              --setvars project.version=${{ env.XPILOT_VERSION }}

      - name: Upload installer and plugin files
        uses: actions/upload-artifact@v2
        with:
          name: xPilot-${{ env.XPILOT_VERSION }}-Windows.zip
          path: |
            xPilot-${{ env.XPILOT_VERSION }}-windows-x64-installer.exe

  ########################## Build macOS ##########################
  
  build-macos:

    #if: ${{ false }}
  
    runs-on: macos-10.15

    env:
      IB_URL: https://installbuilder.com/installbuilder-enterprise-21.9.0-osx-installer.dmg

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      
      - name: Load developer certificate
        env:
          CERTIFICATE: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
        run: ./scripts/make_keychain.sh
          
      - name: Install Conan
        run: |
          python3 -m pip install --upgrade pip
          pip3 install conan
          pip3 install conan_package_tools

      ### Buid Plugin ###

      - name: Create plugin build directory
        working-directory: ${{ env.PLUGIN_DIR }}
        run: |
          cmake -E make_directory build

      - name: Install plugin conan packages
        working-directory: ${{ env.PLUGIN_DIR }}/build
        run: |
          conan install .. --build=missing

      - name: Plugin CMake
        working-directory: ${{ env.PLUGIN_DIR }}/build
        run: |
          cmake ..

      - name: Build plugin
        working-directory: ${{ env.PLUGIN_DIR }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Extract debug symbols
        working-directory: ${{ env.PLUGIN_DIR }}/build/mac_x64
        run: |
          dsymutil xPilot.xpl -o xPilot.dSYM

      - name: Package plugin
        run: |
          mkdir -p ${{ github.workspace }}/xPilot/mac_x64
          cp ${{ env.PLUGIN_DIR }}/build/mac_x64/xPilot.xpl ${{ github.workspace }}/xPilot/mac_x64
          cp -R ${{ env.PLUGIN_DIR }}/build/mac_x64/xPilot.dSYM ${{ github.workspace }}/xPilot/mac_x64
          cp ${{ github.workspace }}/plugin/externals/fmod/mac/libfmod.dylib ${{ github.workspace }}/xPilot/mac_x64
          cp -R ${{ github.workspace }}/plugin/Resources ${{ github.workspace }}/xPilot/
          
      - name: Fix FMOD shared library install name
        working-directory: ${{ github.workspace }}/xPilot/mac_x64
        run: |
          install_name_tool -id @executable_path/../../../Resources/plugins/xPilot/mac_x64/libfmod.dylib libfmod.dylib
          install_name_tool -change @rpath/libfmod.dylib @executable_path/../../../Resources/plugins/xPilot/mac_x64/libfmod.dylib xPilot.xpl

      ### Build Client ###

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
            setup-python: false
            version: ${{ env.QT_VERSION }}

      - name: Create client build directory
        working-directory: ${{ env.CLIENT_DIR }}
        run: |
          cmake -E make_directory build

      - name: Install client conan packages
        working-directory: ${{ env.CLIENT_DIR }}/build
        run: |
          conan install .. --build=missing

      - name: Client CMake
        working-directory: ${{ env.CLIENT_DIR }}/build
        run: |
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DVATSIM_CLIENT_ID=${{ env.VATSIM_CLIENT_ID }} \
            -DVATSIM_CLIENT_KEY=${{ env.VATSIM_CLIENT_KEY }} \
            -DCONFIG_ENCRYPTION_KEY=${{ env.CONFIG_ENCRYPTION_KEY }} \
            -DSENTRY_DSN=${{ env.SENTRY_DSN }} \
            -DSENTRY_BACKEND=crashpad \
            -DSENTRY_INTEGRATION_QT=YES

      - name: Build client
        working-directory: ${{ env.CLIENT_DIR }}/build
        run: |
          cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Extract debug symbols
        working-directory: ${{ env.CLIENT_DIR }}/build/bin
        run: |
          dsymutil xPilot.app/Contents/MacOS/xPilot -o xPilot.dSYM

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@1.2.0
        with:
          version: latest
          token: ${{ secrets.SENTRY_TOKEN }}
          organization: xpilot
          project: xpilot

      - name: Upload debug information files
        working-directory: ${{ env.CLIENT_DIR }}/build/bin
        run: |
          sentry-cli upload-dif xPilot.app/Contents/MacOS/xPilot xPilot.dSYM

      - name: Deploy Qt app bundle
        working-directory: ${{ env.CLIENT_DIR }}/build/bin
        run: |
          ${{ env.Qt5_DIR }}/bin/macdeployqt xPilot.app \
          -qmldir=${{ env.CLIENT_DIR }}/Resources \
          -executable=xPilot.app/Contents/MacOS/xPilot \
          -sign-for-notarization="${{ secrets.APPLE_SIGNING_CERTIFICATE_IDENTITY }}"
          echo "XPILOT_BIN_DIR=`pwd`" >> $GITHUB_ENV

      - name: Get version
        shell: bash
        run: |
          echo "XPILOT_VERSION=$(cat xpilot.json | jq -r 'if .is_beta == true then "\(.version.major).\(.version.minor).\(.version.patch)-beta.\(.beta_number)" else "\(.version.major).\(.version.minor).\(.version.patch)" end')" >> $GITHUB_ENV

      - name: Setup InstallBuilder
        shell: bash
        run: |
          curl -k -L ${{ env.IB_URL }} --output ib.dmg
          hdiutil attach ib.dmg
          /Volumes/InstallBuilder\ Enterprise/*.app/Contents/MacOS/installbuilder.sh --mode unattended --prefix ${{ env.IB_DIR }}
          ${{ env.IB_DIR }}/bin/builder --version
          echo "$IB_LICENSE" > lic.xml
          echo "INSTALLER_SRC_PREFIX=$(pwd)/client" >> $GITHUB_ENV
          echo "INSTALLER_BIN_PREFIX=$XPILOT_BIN_DIR" >> $GITHUB_ENV
          echo "REPO_ROOT_PREFIX=$(pwd)" >> $GITHUB_ENV
          echo "INSTALLER_PLUGIN_PREFIX=${{ github.workspace }}/xPilot" >> $GITHUB_ENV

      - name: Create installer
        shell: bash
        run: |
          ${{ env.IB_DIR }}/bin/builder build installer/project.xml \
              --license lic.xml \
              --setvars project.outputDirectory=$(pwd) \
              --setvars project.version=${{ env.XPILOT_VERSION }} \
              --setvars apple_signing_identity=${{ secrets.APPLE_SIGNING_CERTIFICATE_IDENTITY }} \
              --setvars password=${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}

      - name: Notarize installer
        shell: bash
        run: |
          xcrun altool --notarize-app \
          --primary-bundle-id "org.vatsim.xpilot" \
          --username "${{ secrets.NOTARIZATION_USERNAME }}" \
          --password "${{ secrets.NOTARIZATION_PASSWORD }}" \
          --file xPilot-${{ env.XPILOT_VERSION }}-osx-installer.dmg

      - name: Upload installer and plugin files
        uses: actions/upload-artifact@v2
        with:
          name: xPilot-${{ env.XPILOT_VERSION }}-MacOS.zip
          path: |
            xPilot-${{ env.XPILOT_VERSION }}-osx-installer.dmg

  ########################## Create Release ##########################

  release:
    if: ${{ contains(github.ref, 'master') == true }}
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Get version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Reorganize
        run: |
          mv xPilot*/* . && rmdir xPilot*/

      - name: List directory contents
        run: |
          ls -R

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: xPilot ${{ steps.get_version.outputs.version }}
          prerelease: true
          draft: true
          files: |
            xPilot*
        env:
          GITHUB_TOKEN: ${{ github.token }}